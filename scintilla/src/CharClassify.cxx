// Scintilla source code edit control
/** @file CharClassify.cxx
 ** Character classifications used by Document and RESearch.
 **/
// Copyright 2006 by Neil Hodgson <neilh@scintilla.org>
// The License.txt file describes the conditions under which this software may be distributed.

#include <cstdlib>
#include <cassert>
#include <cstring>

#include <vector>
#include <memory>

#include "CharacterSet.h"
#include "CharClassify.h"

using namespace Scintilla;

CharClassify::CharClassify() noexcept : charClass{} {
	SetDefaultCharClasses(true);
}

void CharClassify::SetDefaultCharClasses(bool includeWordClass) noexcept {
	// Initialize all char classes to default values
	for (int ch = 0; ch < 128; ch++) {
		if (ch == '\r' || ch == '\n')
			charClass[ch] = ccNewLine;
		else if (ch < 0x20 || ch == ' ')
			charClass[ch] = ccSpace;
		else if (includeWordClass && (IsAlphaNumeric(ch) || ch == '_'))
			charClass[ch] = ccWord;
		else
			charClass[ch] = ccPunctuation;
	}

	const int w = includeWordClass ? ccWord : ccPunctuation;
	memset(charClass + 128, w, 128);
}

void CharClassify::SetCharClasses(const unsigned char *chars, cc newCharClass) noexcept {
	// Apply the newCharClass to the specifed chars
	if (chars) {
		const unsigned char w = static_cast<unsigned char>(newCharClass);
		while (*chars) {
			charClass[*chars] = w;
			chars++;
		}
	}
}

void CharClassify::SetCharClassesEx(const unsigned char *chars, int length) noexcept {
	if (chars == nullptr || length <= 0) {
		memset(charClass + 128, ccWord, 128);
	} else if (length == 16) {
		for (int i = 0; i < 128; i++) {
			const unsigned char w = 1 + ((chars[i >> 3] >> (i & 7)) & 1);
			charClass[i + 128] = w;
		}
	} else if (length == 32) {
		for (int i = 0; i < 128; i++) {
			const unsigned char w = (chars[i >> 2] >> (2 * (i & 3))) & 3;
			charClass[i + 128] = w;
		}
	}
}

int CharClassify::GetCharsOfClass(cc characterClass, unsigned char *buffer) const noexcept {
	// Get characters belonging to the given char class; return the number
	// of characters (if the buffer is NULL, don't write to it).
	int count = 0;
	for (int ch = maxChar - 1; ch >= 0; --ch) {
		if (charClass[ch] == characterClass) {
			++count;
			if (buffer) {
				*buffer = static_cast<unsigned char>(ch);
				buffer++;
			}
		}
	}
	return count;
}

//++Autogenerated -- start of section automatically generated
// Created with Python 3.7.2,  Unicode 11.0.0
namespace {
constexpr unsigned int maxUnicode = 0x10ffff;

const unsigned char CharClassifyTable[] = {
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 17, 20, 21, 22, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 25, 25, 28, 29, 30, 31, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 33, 33, 33, 33, 33, 54, 54, 57, 33, 33, 33, 33, 33, 33, 33, 54, 58, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 54, 59, 33, 60, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 61, 25, 62, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 63, 64, 33, 33, 33, 33, 65, 33, 33, 33, 33, 33, 33, 33, 33, 33, 66, 67, 68, 69, 17, 70, 33, 33, 71, 33, 33, 33, 72, 33, 73, 74, 75, 76, 17, 77, 78, 79, 33, 33, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 80, 25, 25, 25, 25, 25, 25, 25, 81, 82, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 83, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 84, 33, 33, 33, 33, 33, 33, 25, 85, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 86, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
0, 0, 0, 0, 1, 2, 3, 4, 5, 3, 3, 6, 5, 3, 3, 7, 0, 0, 0, 0, 1, 8, 9, 10, 3, 3, 11, 3, 3, 3, 11, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 3, 4, 2, 13, 14, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 15, 16, 17, 18, 3, 3, 19, 3, 3, 3, 3, 3, 3, 3, 3, 3, 20, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 21, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 22, 3, 3, 3, 23, 24, 3, 3, 3, 3, 3, 25, 22, 3, 3, 3, 3, 20, 26, 0, 3, 3, 3, 27, 28, 0, 29, 2, 3, 30, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 31, 32, 3, 33, 3, 34, 2, 35, 3, 3, 3, 3, 3, 3, 3, 36, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 37, 0, 3, 3, 3, 3, 3, 3, 38, 39, 3, 3, 3, 3, 3, 40, 2, 41, 3, 3, 3, 42, 3, 43, 0, 0, 0, 0, 0, 0, 3, 3, 44, 40, 0, 0, 45, 3, 19, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 46, 3, 5, 3, 47, 48, 49, 3, 3, 50, 51, 52, 48, 53, 54, 55, 56, 3, 57, 58, 59, 27, 49, 3, 3, 50, 60, 61, 27, 62, 63, 64, 65, 3, 66, 0, 59, 67, 19, 3, 3, 50, 68, 52, 67, 69, 70, 0, 56, 3, 71, 22, 59, 48, 49, 3, 3, 50, 68, 52, 48, 62, 65, 55, 56, 3, 5, 0, 72, 73, 74, 75, 76, 73, 3, 77, 73, 74, 78, 0, 65, 3, 6, 79, 3, 44, 50, 3, 3, 50, 3, 80, 44, 74, 81, 43, 56, 3, 0, 11, 31, 44, 50, 3, 3, 50, 47, 52, 44, 74, 81, 82, 56, 3, 83, 0, 47, 44, 50, 3, 3, 3, 3, 3, 44, 84, 85, 3, 56, 3, 3, 33, 72, 3, 23, 86, 3, 3, 19, 87, 23, 88, 89, 3, 65, 3, 90, 0, 22, 3, 3, 3, 3, 3, 3, 91, 3, 11, 3, 92, 0, 0, 0, 0, 93, 94, 85, 22, 95, 72, 3, 69, 89, 40, 3, 52, 0, 0, 0, 0, 96, 2, 2, 4, 3, 3, 97, 98, 3, 22, 3, 3, 3, 99, 22, 3, 15, 3, 3, 22, 3, 3, 3, 100, 101, 102, 2, 79, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 38, 3, 3, 3, 3, 67, 103, 3, 3, 3, 3, 3, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 3, 3, 3, 3, 3, 3, 3, 3, 3, 74, 23, 74, 3, 3, 3, 3, 3, 74, 3, 3, 3, 3, 74, 23, 74, 3, 23, 3, 3, 3, 3, 3, 3, 3, 74, 3, 3, 3, 3, 3, 3, 3, 3, 36, 2, 5, 3, 99, 3, 3, 2, 71, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 40, 40, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 34, 3, 3, 22, 3, 3, 28, 3, 3, 3, 3, 3, 3, 3, 3, 3, 106, 3, 70, 3, 44, 99, 0, 3, 3, 107, 0, 3, 3, 108, 0, 3, 44, 109, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 110, 111, 3, 37, 3, 37, 2, 112, 3, 37, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 70, 3, 3, 3, 3, 3, 43, 3, 3, 3, 3, 3, 3, 3, 3, 40, 0, 3, 3, 3, 23, 3, 108, 3, 108, 113, 3, 3, 3, 3, 40, 99, 0, 3, 3, 3, 3, 3, 108, 3, 3, 3, 37, 3, 114, 2, 2, 2, 2, 3, 3, 3, 115, 3, 3, 3, 3, 3, 3, 3, 23, 3, 3, 3, 48, 3, 37, 3, 37, 116, 35, 3, 23, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 108, 3, 4, 2, 117, 118, 119, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 108, 120, 3, 3, 3, 3, 3, 3, 3, 121, 3, 80, 3, 3, 3, 3, 3, 38, 3, 70, 3, 3, 3, 3, 3, 36, 2, 0, 104, 3, 3, 3, 3, 37, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 19, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 40, 40, 3, 3, 3, 3, 40, 40, 3, 122, 3, 3, 3, 40, 3, 3, 3, 3, 3, 3, 44, 123, 124, 13, 56, 125, 3, 13, 126, 107, 0, 0, 2, 2, 2, 127, 2, 2, 2, 2, 2, 41, 0, 0, 52, 128, 3, 129, 3, 99, 2, 2, 2, 2, 0, 0, 3, 3, 3, 3, 70, 0, 130, 131, 132, 133, 14, 134, 3, 57, 135, 136, 3, 3, 3, 3, 3, 3, 3, 92, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 41, 0, 0, 0, 2, 79, 0, 0, 3, 3, 3, 3, 3, 3, 3, 118, 2, 2, 2, 2, 2, 2, 2, 2, 2, 131, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 137, 3, 3, 3, 118, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 138, 2, 2, 2, 35, 2, 2, 2, 2, 2, 2, 139, 2, 2, 2, 2, 2, 41, 3, 3, 3, 3, 3, 23, 3, 3, 3, 3, 3, 23, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 13, 117, 108, 140, 3, 3, 3, 3, 67, 103, 3, 3, 3, 3, 3, 3, 3, 54, 141, 54, 3, 3, 23, 0, 23, 23, 23, 23, 23, 23, 23, 23, 3, 3, 3, 3, 2, 2, 2, 2, 2, 116, 2, 2, 2, 41, 0, 0, 0, 0, 0, 0, 2, 2, 2, 142, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 143, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 35, 0, 0, 0, 2, 143, 144, 2, 2, 2, 145, 105, 146, 147, 148, 105, 105, 105, 105, 105, 105, 105, 105, 105, 149, 150, 145, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 151, 152, 3, 3, 3, 3, 3, 148, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 149, 153, 2, 3, 3, 3, 43, 2, 2, 2, 2, 143, 0, 105, 105, 2, 2, 2, 41, 105, 154, 2, 2, 2, 105, 145, 105, 2, 2, 2, 2, 105, 154, 2, 2, 2, 2, 145, 105, 2, 2, 2, 2, 2, 2, 2, 41, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 155, 0, 2, 2, 2, 2, 2, 2, 2, 2, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 0, 0, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 156, 2, 2, 2, 2, 2, 2, 41, 0, 3, 3, 3, 3, 3, 38, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 13, 3, 3, 3, 108, 0, 0, 3, 3, 3, 3, 3, 3, 104, 20, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 0, 2, 2, 116, 3, 131, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 157, 3, 3, 3, 3, 3, 37, 0, 0, 0, 0, 0, 0, 54, 3, 3, 3, 3, 3, 3, 143, 38, 71, 3, 3, 3, 3, 3, 3, 118, 0, 3, 3, 3, 3, 3, 3, 3, 3, 40, 29, 3, 37, 3, 3, 3, 158, 3, 3, 3, 3, 3, 38, 3, 3, 3, 3, 108, 159, 105, 105, 105, 156, 3, 3, 3, 3, 3, 3, 3, 3, 96, 160, 3, 161, 3, 3, 3, 23, 3, 3, 3, 3, 3, 3, 23, 0, 3, 40, 3, 162, 3, 3, 11, 131, 3, 3, 3, 3, 3, 3, 3, 3, 43, 0, 0, 163, 3, 3, 164, 0, 165, 165, 165, 0, 23, 23, 3, 3, 3, 3, 3, 104, 40, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 166, 3, 37, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 167, 0, 105, 105, 149, 168, 105, 105, 105, 105, 105, 167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 155, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 169, 0, 0, 0, 0, 23, 0, 45, 152, 3, 33, 23, 89, 170, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 2, 71, 0, 45, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 38, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 86, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 171, 3, 3, 2, 71, 3, 3, 2, 2, 2, 2, 172, 2, 41, 143, 44, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 99, 1, 2, 3, 4, 5, 3, 3, 6, 5, 3, 3, 6, 173, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 149, 174, 174, 174, 175, 41, 41, 0, 176, 3, 47, 3, 3, 23, 3, 3, 177, 3, 40, 3, 40, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 43, 178, 3, 3, 3, 3, 3, 179, 2, 3, 3, 3, 3, 3, 3, 3, 96, 2, 180, 2, 143, 141, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 99, 3, 3, 3, 3, 3, 3, 70, 0, 3, 3, 3, 108, 3, 3, 3, 3, 108, 152, 3, 3, 3, 43, 3, 3, 3, 3, 3, 43, 3, 3, 3, 182, 3, 3, 3, 3, 108, 3, 183, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 40, 3, 37, 3, 3, 3, 3, 108, 3, 3, 3, 3, 108, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 108, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 23, 0, 3, 3, 40, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 50, 3, 3, 3, 3, 67, 184, 3, 3, 182, 3, 3, 3, 11, 5, 3, 3, 3, 23, 54, 3, 0, 0, 0, 0, 0, 0, 3, 3, 185, 45, 3, 3, 3, 179, 3, 3, 3, 186, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 85, 3, 3, 86, 3, 3, 3, 3, 3, 187, 85, 47, 22, 3, 3, 40, 27, 3, 70, 2, 141, 3, 3, 3, 11, 3, 3, 3, 3, 0, 0, 0, 0, 3, 5, 3, 3, 23, 45, 41, 0, 3, 3, 3, 3, 3, 3, 40, 1, 3, 3, 40, 3, 3, 3, 43, 3, 3, 3, 37, 188, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 70, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 43, 0, 3, 3, 3, 3, 3, 3, 43, 86, 3, 3, 3, 3, 3, 0, 3, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 13, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 11, 35, 86, 3, 3, 3, 0, 54, 3, 3, 3, 3, 3, 3, 3, 189, 71, 0, 3, 3, 3, 70, 3, 37, 3, 3, 3, 3, 3, 3, 44, 3, 190, 0, 3, 3, 3, 3, 191, 0, 3, 3, 3, 3, 3, 3, 3, 3, 13, 192, 3, 193, 22, 3, 99, 0, 3, 3, 19, 3, 3, 3, 3, 194, 0, 0, 0, 0, 0, 0, 0, 0, 23, 195, 3, 67, 3, 196, 3, 3, 3, 3, 3, 3, 3, 43, 3, 37, 47, 48, 49, 3, 3, 50, 68, 19, 48, 62, 78, 152, 56, 99, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 3, 197, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 20, 0, 3, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 40, 3, 96, 2, 2, 40, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 198, 0, 3, 37, 2, 119, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 37, 0, 0, 0, 0, 0, 0, 3, 3, 3, 36, 3, 108, 3, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 43, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 11, 116, 0, 3, 3, 3, 3, 3, 3, 56, 3, 3, 200, 79, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 50, 3, 3, 3, 3, 23, 3, 201, 0, 3, 3, 3, 99, 131, 3, 3, 3, 86, 3, 3, 22, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 19, 3, 3, 3, 3, 23, 202, 3, 0, 3, 37, 67, 50, 3, 3, 3, 23, 19, 70, 3, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 11, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 23, 119, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 70, 3, 3, 3, 23, 3, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 40, 203, 0, 3, 3, 3, 3, 3, 3, 11, 2, 171, 0, 3, 19, 19, 3, 3, 152, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 11, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 99, 0, 3, 3, 3, 3, 3, 23, 0, 54, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 169, 0, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 43, 3, 99, 3, 70, 3, 205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 35, 0, 2, 2, 2, 2, 41, 1, 2, 2, 2, 2, 2, 2, 135, 206, 43, 45, 207, 118, 2, 2, 2, 208, 2, 2, 2, 2, 2, 2, 2, 141, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 108, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 41, 0, 3, 3, 3, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 44, 3, 3, 3, 3, 3, 3, 3, 3, 44, 210, 211, 3, 212, 47, 3, 3, 3, 3, 3, 3, 3, 67, 36, 44, 44, 3, 3, 3, 213, 89, 86, 50, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 40, 3, 3, 3, 33, 3, 3, 104, 3, 3, 3, 104, 3, 3, 15, 3, 3, 3, 15, 3, 3, 11, 3, 3, 3, 11, 3, 3, 3, 33, 3, 3, 3, 33, 3, 3, 104, 56, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 11, 117, 3, 3, 3, 3, 3, 13, 214, 2, 215, 143, 0, 45, 22, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 3, 3, 49, 170, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 48, 3, 23, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 43, 3, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 3, 3, 3, 3, 3, 3, 31, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 3, 3, 3, 93, 22, 217, 218, 88, 219, 93, 122, 93, 217, 217, 64, 3, 19, 3, 108, 59, 19, 3, 108, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 143, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 143, 0, 2, 41, 1, 2, 1, 2, 1, 2, 2, 2, 35, 0, 3, 99, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 143, 2, 2, 2, 2, 2, 2, 2, 119, 0, 0, 0, 0, 0, 0, 29, 2, 2, 2, 79, 0, 2, 2, 2, 2, 2, 143, 2, 141, 71, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 0, 2, 119, 2, 71, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 143, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 141, 0, 0, 0, 0, 2, 143, 2, 2, 2, 2, 2, 2, 2, 0, 2, 71, 2, 2, 2, 2, 2, 0, 2, 2, 2, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 143, 2, 2, 2, 2, 2, 41, 2, 2, 2, 2, 2, 2, 220, 221, 2, 2, 2, 2, 79, 0, 2, 71, 79, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 149, 0, 0, 0, 0, 0, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 156, 0, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 155, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 169, 0, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 222, 0, 0, 0, 105, 105, 105, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 0, 3, 3, 2, 3, 3, 0, 3, 3, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 0, 0, 2, 2, 2, 2, 3, 2, 0, 0, 0, 0, 3, 3, 2, 3, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 0, 0, 3, 3, 3, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 2, 2, 3, 0, 0, 3, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, 0, 0, 2, 3, 3, 2, 2, 2, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 0, 0, 3, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 3, 2, 0, 0, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 2, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 2, 2, 3, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 3, 2, 2, 3, 3, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 2, 2, 0, 2, 0, 0, 2, 0, 0, 0, 2, 2, 2, 0, 2, 0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 3, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 2, 2, 0, 0, 3, 3, 3, 2, 2, 2, 0, 0, 3, 0, 0, 0, 3, 3, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 2, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 3, 2, 3, 3, 3, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0, 2, 2, 2, 0, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 3, 0, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 3, 3, 2, 2, 2, 2, 2, 3, 3, 2, 3, 2, 2, 2, 2, 3, 2, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 0, 0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 3, 3, 3, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 4, 4, 4, 4, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 2, 3, 3, 2, 2, 2, 2, 2, 3, 3, 3, 2, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 0, 0, 0, 0, 3, 3, 2, 2, 0, 0, 3, 3, 3, 3, 0, 0, 0, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 3, 2, 2, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 2, 2, 0, 2, 2, 0, 2, 3, 3, 3, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 2, 2, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 3, 3, 3, 3, 0, 0, 0, 2, 2, 2, 3, 3, 0, 3, 3, 3, 3, 3, 3, 2, 2, 2, 0, 2, 2, 2, 2, 3, 3, 2, 0, 3, 2, 2, 2, 2, 3, 0, 0, 2, 2, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 2, 2, 0, 3, 0, 3, 2, 0, 2, 3, 3, 3, 2, 0, 0, 0, 2, 2, 2, 3, 0, 0, 0, 0, 2, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 3, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 2, 2, 3, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 3, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 2, 2, 3, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 0, 3, 3, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0,
};

}

CharClassify::cc CharClassify::ClassifyCharacter(unsigned int ch) noexcept {
	if (ch > maxUnicode) {
		// Cn
		return ccSpace;
	}

	ch = (CharClassifyTable[ch >> 9] << 9) + (ch & 511);
	ch = (CharClassifyTable[2176 + (ch >> 3)] << 3) + (ch & 7);
	return static_cast<cc>(CharClassifyTable[7744 + ch]);
}
//--Autogenerated -- end of section automatically generated


namespace {

inline void SetRange(bool bs[256], int low, int high) noexcept {
	while (low <= high) {
		bs[low] = true;
		++low;
	}
}

constexpr bool IsDBCSCodePage(int codePage) noexcept {
	return codePage == 932
		|| codePage == 936
		|| codePage == 949
		|| codePage == 950
		|| codePage == 1361;
}

std::vector<std::unique_ptr<DBCSCharClassify>> dbcsCharClassifyList;

constexpr unsigned int maxDBCSCharacter = 0xffff;

//dbcs++Autogenerated -- start of section automatically generated
// Created with Python 3.7.2,  Unicode 11.0.0
const unsigned char CharClassifyTable_CP932[] = {
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 1, 1, 1,
0, 0, 0, 0, 1, 2, 3, 4, 5, 3, 3, 6, 5, 3, 3, 7, 0, 0, 0, 0, 8, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 11, 12, 2, 2, 2, 13, 2, 2, 2, 2, 2, 2, 14, 2, 2, 2, 2, 2, 2, 2, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 2, 17, 3, 15, 3, 3, 3, 18, 5, 3, 3, 19, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 21, 9, 9, 21, 22, 3, 3, 23, 17, 3, 3, 3, 3, 4, 24, 25, 20, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 15, 2, 3, 26, 3, 3, 27, 6, 2, 2, 2, 28, 9, 9, 9, 20, 29, 30, 3, 31, 0, 0, 0, 0, 0, 0, 0, 0, 32, 33, 34, 3, 3, 3, 3, 26, 3, 3, 3, 3, 5, 35, 36, 3, 3, 3, 37, 3, 3, 3, 3, 38, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 39, 22, 23, 26, 40, 3, 41, 3, 3, 3, 3, 23, 2, 2, 2, 2, 2, 2, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 23, 2, 2, 44, 45, 2, 2, 2, 28, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 20, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 21, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 20, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 21, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 20, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 0, 4, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 3, 3, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 4, 4, 4, 4, 4, 4, 4, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 3, 2, 2, 3, 2, 0, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 2, 3, 0, 3, 3, 2, 2, 3, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0,
};

CharClassify::cc ClassifyCharacter_CP932(unsigned int ch) noexcept {
	if (ch > maxDBCSCharacter) {
		// Cn
		return CharClassify::ccSpace;
	}

	ch = (CharClassifyTable_CP932[ch >> 8] << 8) + (ch & 255);
	ch = (CharClassifyTable_CP932[256 + (ch >> 3)] << 3) + (ch & 7);
	return static_cast<CharClassify::cc>(CharClassifyTable_CP932[608 + ch]);
}

const unsigned char CharClassifyTable_CP936[] = {
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 12, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 13, 1,
0, 0, 0, 0, 1, 2, 3, 4, 5, 3, 3, 6, 5, 3, 3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 10, 11, 2, 2, 2, 2, 2, 2, 2, 2, 2, 12, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 13, 14, 15, 3, 3, 3, 3, 3, 16, 9, 15, 17, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 18, 2, 3, 4, 5, 3, 3, 6, 5, 3, 3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 13, 3, 3, 20, 15, 3, 3, 20, 2, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 13, 3, 3, 3, 23, 0, 15, 3, 3, 3, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 2, 2, 2, 2, 12, 2, 2, 24, 0, 15, 3, 3, 25, 26, 3, 3, 3, 3, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 18, 2, 27, 28, 2, 2, 12, 2, 29, 30, 0, 31, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 32, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9,
0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 3, 3, 3, 2, 2, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 4, 4, 4, 2, 2, 2, 2, 2, 0, 0, 0, 4, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 0, 3, 3, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 2, 2, 2, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 0, 3, 0, 0, 0, 4, 3, 3, 4, 4, 4, 4, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 3, 3, 3, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4,
};

CharClassify::cc ClassifyCharacter_CP936(unsigned int ch) noexcept {
	if (ch > maxDBCSCharacter) {
		// Cn
		return CharClassify::ccSpace;
	}

	ch = (CharClassifyTable_CP936[ch >> 8] << 8) + (ch & 255);
	ch = (CharClassifyTable_CP936[256 + (ch >> 3)] << 3) + (ch & 7);
	return static_cast<CharClassify::cc>(CharClassifyTable_CP936[704 + ch]);
}

const unsigned char CharClassifyTable_CP949[] = {
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 4, 2, 5, 2, 6, 2, 3, 2, 7, 2, 8, 2, 9, 2, 10, 2, 11, 2, 12, 2, 13, 2, 14, 2, 15, 2, 15, 2, 15, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 16, 17, 1, 17, 1, 17, 1, 1, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 1, 1, 1,
0, 0, 0, 0, 1, 2, 3, 4, 5, 3, 3, 6, 5, 3, 3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 9, 10, 8, 9, 9, 10, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 8, 9, 9, 9, 12, 13, 2, 2, 2, 14, 2, 2, 2, 2, 2, 15, 8, 9, 9, 9, 16, 2, 17, 2, 2, 2, 2, 2, 2, 0, 0, 0, 8, 9, 9, 9, 18, 2, 3, 4, 5, 3, 3, 6, 5, 3, 3, 7, 8, 9, 9, 9, 19, 20, 3, 21, 22, 3, 3, 23, 22, 3, 3, 23, 8, 9, 9, 9, 18, 2, 2, 2, 2, 2, 2, 2, 24, 0, 0, 0, 8, 9, 9, 9, 25, 2, 2, 2, 2, 2, 2, 26, 2, 2, 0, 0, 8, 9, 9, 9, 27, 3, 1, 2, 2, 2, 2, 2, 28, 3, 3, 29, 8, 9, 9, 9, 19, 3, 17, 2, 2, 2, 2, 2, 28, 3, 3, 29, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 30, 0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 0, 8, 9, 9, 9, 19, 3, 3, 3, 21, 0, 22, 3, 3, 3, 21, 0, 8, 9, 9, 9, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11,
0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 4, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 4, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 4, 2, 2, 2, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
};

CharClassify::cc ClassifyCharacter_CP949(unsigned int ch) noexcept {
	if (ch > maxDBCSCharacter) {
		// Cn
		return CharClassify::ccSpace;
	}

	ch = (CharClassifyTable_CP949[ch >> 7] << 7) + (ch & 127);
	ch = (CharClassifyTable_CP949[512 + (ch >> 3)] << 3) + (ch & 7);
	return static_cast<CharClassify::cc>(CharClassifyTable_CP949[800 + ch]);
}

const unsigned char CharClassifyTable_CP950[] = {
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
0, 0, 1, 2, 3, 4, 3, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 7, 7, 8, 6, 6, 9, 7, 10, 7, 7, 8, 6, 6, 6, 6, 7, 11, 12, 8, 6, 6, 13, 14, 15, 14, 14, 16, 6, 6, 6, 6, 14, 14, 14, 16, 6, 6, 17, 18, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 19,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4,
};

CharClassify::cc ClassifyCharacter_CP950(unsigned int ch) noexcept {
	if (ch > maxDBCSCharacter) {
		// Cn
		return CharClassify::ccSpace;
	}

	ch = (CharClassifyTable_CP950[ch >> 9] << 9) + (ch & 511);
	ch = (CharClassifyTable_CP950[128 + (ch >> 4)] << 4) + (ch & 15);
	return static_cast<CharClassify::cc>(CharClassifyTable_CP950[288 + ch]);
}

const unsigned char CharClassifyTable_CP1361[] = {
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 5, 6, 6, 7, 1, 1, 1, 1, 1, 8, 9, 10, 11, 12, 13, 1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 1, 1, 1, 1, 1, 1,
0, 0, 0, 0, 1, 2, 3, 4, 5, 3, 3, 6, 5, 3, 3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 10, 11, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 13, 9, 10, 11, 13, 9, 10, 11, 13, 9, 10, 11, 13, 9, 10, 11, 13, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 13, 9, 10, 11, 13, 9, 10, 11, 13, 9, 10, 11, 13, 9, 10, 11, 13, 9, 10, 11, 13, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 13, 9, 10, 11, 13, 9, 10, 11, 13, 9, 10, 11, 13, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 2, 2, 2, 16, 2, 2, 2, 17, 0, 0, 1, 2, 18, 2, 19, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 3, 3, 6, 5, 20, 0, 0, 21, 22, 23, 0, 0, 0, 0, 0, 24, 9, 9, 9, 9, 25, 0, 0, 0, 0, 0, 0, 21, 26, 3, 27, 21, 3, 3, 28, 21, 20, 0, 0, 21, 26, 1, 2, 2, 2, 2, 2, 2, 2, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 2, 2, 2, 2, 2, 2, 31, 2, 17, 0, 0, 32, 0, 33, 3, 1, 2, 2, 2, 2, 2, 18, 3, 3, 20, 0, 0, 0, 0, 0, 0, 21, 3, 19, 2, 2, 2, 2, 2, 18, 20, 0, 0, 21, 3, 34, 9, 9, 9, 9, 9, 9, 9, 9, 9, 35, 0, 0, 0, 0, 0, 0, 0, 13, 9, 9, 9, 9, 9, 9, 9, 9, 25, 0, 0, 13, 36, 21, 3, 3, 3, 27, 0, 21, 3, 3, 3, 27, 0, 0, 0, 0, 0, 0, 0, 13, 9, 9, 9, 9, 9, 9, 9, 9, 25, 0, 0, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 25,
0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 0, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
};

CharClassify::cc ClassifyCharacter_CP1361(unsigned int ch) noexcept {
	if (ch > maxDBCSCharacter) {
		// Cn
		return CharClassify::ccSpace;
	}

	ch = (CharClassifyTable_CP1361[ch >> 8] << 8) + (ch & 255);
	ch = (CharClassifyTable_CP1361[256 + (ch >> 3)] << 3) + (ch & 7);
	return static_cast<CharClassify::cc>(CharClassifyTable_CP1361[736 + ch]);
}
//dbcs--Autogenerated -- end of section automatically generated

}

DBCSCharClassify::DBCSCharClassify(int codePage_) noexcept:
	codePage(codePage_),
	classifyCharacter(nullptr),
	leadByte{},
	invalidLeadByte{},
	invalidTrailByte{} {
	// Byte ranges found in Wikipedia articles with relevant search strings in each case
	switch (codePage_) {
	case 932:
		// Shift_JIS
		classifyCharacter = ClassifyCharacter_CP932;
		SetRange(leadByte, 0x81, 0x9F);
		SetRange(leadByte, 0xE0, 0xFC);
		// Lead bytes F0 to FC may be a Microsoft addition.

		invalidLeadByte[0x85] = true;
		invalidLeadByte[0x86] = true;
		invalidLeadByte[0xEB] = true;
		invalidLeadByte[0xEC] = true;
		invalidLeadByte[0xEF] = true;
		invalidLeadByte[0xFA] = true;
		invalidLeadByte[0xFB] = true;
		invalidLeadByte[0xFC] = true;

		SetRange(invalidTrailByte, 0x00, 0x3F);
		invalidTrailByte[0x7F] = true;
		SetRange(invalidTrailByte, 0xFD, 0xFF);
		break;

	case 936:
		// GBK
		classifyCharacter = ClassifyCharacter_CP936;
		SetRange(leadByte, 0x81, 0xFE);

		invalidLeadByte[0x80] = true;
		invalidLeadByte[0xFF] = true;

		SetRange(invalidTrailByte, 0x00, 0x3F);
		invalidTrailByte[0x7F] = true;
		invalidTrailByte[0xFF] = true;
		break;

	case 949:
		// Korean Unified Hangul Code, Wansung KS C-5601-1987
		classifyCharacter = ClassifyCharacter_CP949;
		SetRange(leadByte, 0x81, 0xFE);

		invalidLeadByte[0x80] = true;
		invalidLeadByte[0xC9] = true;
		invalidLeadByte[0xFE] = true;
		invalidLeadByte[0xFF] = true;

		SetRange(invalidTrailByte, 0x00, 0x40);
		SetRange(invalidTrailByte, 0x5B, 0x60);
		SetRange(invalidTrailByte, 0x7B, 0x80);
		invalidTrailByte[0xFF] = true;
		break;

	case 950:
		// Big5
		classifyCharacter = ClassifyCharacter_CP950;
		SetRange(leadByte, 0x81, 0xFE);

		SetRange(invalidLeadByte, 0x80, 0xA0);
		invalidLeadByte[0xC8] = true;
		SetRange(invalidLeadByte, 0xFA, 0xFF);

		SetRange(invalidTrailByte, 0x00, 0x3F);
		SetRange(invalidTrailByte, 0x7F, 0xA0);
		invalidTrailByte[0xFF] = true;
		break;

	case 1361:
		// Korean Johab, KS C-5601-1992
		classifyCharacter = ClassifyCharacter_CP1361;
		SetRange(leadByte, 0x84, 0xD3);
		SetRange(leadByte, 0xD8, 0xDE);
		SetRange(leadByte, 0xE0, 0xF9);

		SetRange(invalidLeadByte, 0x80, 0x83);
		SetRange(invalidLeadByte, 0xD4, 0xD8);
		invalidLeadByte[0xDF] = true;
		SetRange(invalidLeadByte, 0xFA, 0xFF);

		SetRange(invalidTrailByte, 0x00, 0x30);
		invalidTrailByte[0x80] = true;
		invalidTrailByte[0xFF] = true;
		break;
	}
}

const DBCSCharClassify* DBCSCharClassify::Get(int codePage) {
	if (IsDBCSCodePage(codePage)) {
		for (const auto &dbcs : dbcsCharClassifyList) {
			if (dbcs->codePage == codePage) {
				return dbcs.get();
			}
		}

		dbcsCharClassifyList.push_back(std::unique_ptr<DBCSCharClassify>(new DBCSCharClassify(codePage)));
		return dbcsCharClassifyList.back().get();
	}
	return nullptr;
}
